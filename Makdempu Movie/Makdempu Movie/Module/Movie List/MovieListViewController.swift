//
//  MovieListViewController.swift
//  Makdempu Movie
//
//  Created by Ilyas Bintang Prayogi on 13/02/24.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import UIScrollView_InfiniteScroll

final class MovieListViewController: UIViewController {

    var genreId: Int = 0
    var movies: [Movie] = []
    
    @IBOutlet weak var cv_movielist: UICollectionView!
    
    // MARK: - Public properties -

    var presenter: MovieListPresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Movie"
        
        cv_movielist.delegate = self
        cv_movielist.dataSource = self
        
        cv_movielist.register(UINib(nibName: String(describing: MovieListCell.self), bundle: nil), forCellWithReuseIdentifier: MovieListCell.indentifier)
        
        presenter.getMovieList(with: genreId)
    }

}

// MARK: - Extensions -

extension MovieListViewController: MovieListViewInterface {
    func update(with movies: [Movie]) {
        DispatchQueue.main.async {
            self.movies = movies
            self.cv_movielist.reloadData()
            self.cv_movielist.addInfiniteScroll { (collectionView) -> Void in
                let startIndex = self.movies.count
                self.movies.append(contentsOf: movies)
                var indexPaths = [IndexPath]()
                for index in startIndex..<self.movies.count {
                    let indexPath = IndexPath(row: index, section: 0)
                    indexPaths.append(indexPath)
                }
                collectionView.performBatchUpdates({ () -> Void in
                    // update collection view
                    collectionView.insertItems(at: indexPaths)
                }, completion: { (finished) -> Void in
                    // finish infinite scroll animations
                    collectionView.finishInfiniteScroll()
                });
            }
        }
    }
    
    func update(with error: String) {
        DispatchQueue.main.async {
            let alert = UIAlertController(title: "Error", message: error, preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default))
            self.present(alert, animated: true,completion: nil)
        }
    }
}

extension MovieListViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return movies.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let movie = movies[indexPath.row]
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: MovieListCell.indentifier, for: indexPath) as! MovieListCell
        cell.iv_poster.setImage(from: movie.posterPath ?? "")
        cell.lb_title.text = movie.title
        cell.lb_date.text = movie.releaseDate
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width = (collectionView.frame.width - 50)/2
        let height = width * 1.9
        return CGSize(width: width, height: height)
    }
}
